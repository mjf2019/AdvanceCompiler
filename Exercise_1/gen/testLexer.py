# Generated from G:/PHD-IUST/Courses/Compiler/Assignment/Exercise_1\test.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,13,102,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,
        5,1,6,1,6,1,7,1,7,1,7,1,7,5,7,50,8,7,10,7,12,7,53,9,7,1,7,3,7,56,
        8,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,5,8,66,8,8,10,8,12,8,69,9,8,
        1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,5,11,82,8,11,10,
        11,12,11,85,9,11,1,12,4,12,88,8,12,11,12,12,12,89,1,13,1,13,1,13,
        1,13,1,14,4,14,97,8,14,11,14,12,14,98,1,14,1,14,2,51,67,0,15,1,1,
        3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,0,25,0,27,12,
        29,13,1,0,3,4,0,42,42,63,63,65,90,97,122,1,0,48,57,3,0,9,9,13,13,
        32,32,105,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
        0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,
        0,0,0,0,21,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,1,31,1,0,0,0,3,33,1,
        0,0,0,5,35,1,0,0,0,7,37,1,0,0,0,9,39,1,0,0,0,11,41,1,0,0,0,13,43,
        1,0,0,0,15,45,1,0,0,0,17,61,1,0,0,0,19,75,1,0,0,0,21,77,1,0,0,0,
        23,79,1,0,0,0,25,87,1,0,0,0,27,91,1,0,0,0,29,96,1,0,0,0,31,32,5,
        40,0,0,32,2,1,0,0,0,33,34,5,41,0,0,34,4,1,0,0,0,35,36,5,43,0,0,36,
        6,1,0,0,0,37,38,5,45,0,0,38,8,1,0,0,0,39,40,5,42,0,0,40,10,1,0,0,
        0,41,42,5,47,0,0,42,12,1,0,0,0,43,44,5,61,0,0,44,14,1,0,0,0,45,46,
        5,47,0,0,46,47,5,47,0,0,47,51,1,0,0,0,48,50,9,0,0,0,49,48,1,0,0,
        0,50,53,1,0,0,0,51,52,1,0,0,0,51,49,1,0,0,0,52,55,1,0,0,0,53,51,
        1,0,0,0,54,56,5,13,0,0,55,54,1,0,0,0,55,56,1,0,0,0,56,57,1,0,0,0,
        57,58,5,10,0,0,58,59,1,0,0,0,59,60,6,7,0,0,60,16,1,0,0,0,61,62,5,
        47,0,0,62,63,5,42,0,0,63,67,1,0,0,0,64,66,9,0,0,0,65,64,1,0,0,0,
        66,69,1,0,0,0,67,68,1,0,0,0,67,65,1,0,0,0,68,70,1,0,0,0,69,67,1,
        0,0,0,70,71,5,42,0,0,71,72,5,47,0,0,72,73,1,0,0,0,73,74,6,8,0,0,
        74,18,1,0,0,0,75,76,3,23,11,0,76,20,1,0,0,0,77,78,3,25,12,0,78,22,
        1,0,0,0,79,83,7,0,0,0,80,82,7,0,0,0,81,80,1,0,0,0,82,85,1,0,0,0,
        83,81,1,0,0,0,83,84,1,0,0,0,84,24,1,0,0,0,85,83,1,0,0,0,86,88,7,
        1,0,0,87,86,1,0,0,0,88,89,1,0,0,0,89,87,1,0,0,0,89,90,1,0,0,0,90,
        26,1,0,0,0,91,92,5,10,0,0,92,93,1,0,0,0,93,94,6,13,0,0,94,28,1,0,
        0,0,95,97,7,2,0,0,96,95,1,0,0,0,97,98,1,0,0,0,98,96,1,0,0,0,98,99,
        1,0,0,0,99,100,1,0,0,0,100,101,6,14,1,0,101,30,1,0,0,0,7,0,51,55,
        67,83,89,98,2,6,0,0,0,1,0
    ]

class testLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    Plus = 3
    MINUS = 4
    MUL = 5
    DIVIDE = 6
    ASSIGN = 7
    LINE_COMMENT = 8
    BLOCK_COMMENT = 9
    Id = 10
    Number = 11
    Newline = 12
    Whitespace = 13

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'+'", "'-'", "'*'", "'/'", "'='", "'\\n'" ]

    symbolicNames = [ "<INVALID>",
            "Plus", "MINUS", "MUL", "DIVIDE", "ASSIGN", "LINE_COMMENT", 
            "BLOCK_COMMENT", "Id", "Number", "Newline", "Whitespace" ]

    ruleNames = [ "T__0", "T__1", "Plus", "MINUS", "MUL", "DIVIDE", "ASSIGN", 
                  "LINE_COMMENT", "BLOCK_COMMENT", "Id", "Number", "IDENTIFIER", 
                  "NUMBER", "Newline", "Whitespace" ]

    grammarFileName = "test.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


